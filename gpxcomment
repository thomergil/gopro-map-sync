#!/usr/bin/env python

import sys
import os
import argparse
import logging
import traceback

import gpxlib

DEFAULT_LOG_LEVEL = 'info'

def main():
    parser = argparse.ArgumentParser(description="A tool to fix timestamps in a GPX file based on a reference GPX track")
    parser.add_argument("-l", "--log", help="Log level (INFO, DEBUG, WARNING, ERROR)", default=DEFAULT_LOG_LEVEL)
    parser.add_argument("-o", "--output", help="Write output to OUTPUT")
    parser.add_argument("-r", "--reference", help="The reference GPX track (e.g., from a Garmin or Wahoo)", required=True)
    parser.add_argument("-z", "--force-timezone", help="Force per-point timezone lookup", action="store_true")
    parser.add_argument("files", nargs="*")
    args = parser.parse_args()

    numeric_level = getattr(logging, args.log.upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError('Invalid log level: %s' % args.log)
    logging.basicConfig(level=numeric_level, format="%(asctime)s -- %(message)s")

    if not os.path.isfile(args.reference):
        sys.exit("--reference parameter %s does not exist" % (args.reference))

    logging.info("Parsing " + args.reference)
    gpx_in, ref_points = gpxlib.read(args.reference)
    gpx_out, segment = gpxlib.create(gpx_in)

    # read all points from all given files
    points = []
    for f in args.files:
        _, xpoints = gpxlib.read(f)
        points += xpoints

    try:
        segment.points = gpxlib.gpxcomment(points, ref_points, force_timezone=args.force_timezone)
    except Exception as e:
        sys.exit(traceback.format_exc())

    s = gpx_out.to_xml()
    if args.output:
        with open(args.output, 'w') as f:
            f.write(s)
    else:
        print(s)


if __name__ == '__main__':
    main()
